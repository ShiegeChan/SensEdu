/////////////////////////////////////////////////////////////////// general arduino + matlab info //////////////////////////////////
To access arduino through matlab, Serial Monitor MUST NOT be open in arduino ide. Otherwise, the error will occur in MATLAB and the program won't run. 



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Open the MATLAB script "plot_microphones_data.m". 
Before reprogramming Arduino code and uploading it, in matlab command window type: "arduino=[]". This command will clean the buffers. 

Open Arduino script "dev_arduino.ino". 
Make sure Arduino port is selected and same value in both of the scripts. 

To plot only the distance data coming from the Arduino, in Arduino script set: 
#define LOCAL_XCORR     true    
#define XCORR_DEBUG     false 

and in MATLAB script set   
PLOT_DISTANCE = true;
PLOT_DETAILED_DATA = false; 


To plot all the data (distance, raw, after filtering, after cross-correlation) in Arduino script set:
#define LOCAL_XCORR     true    
#define XCORR_DEBUG     true 

and in MATLAB script set: 
PLOT_DISTANCE = true;
PLOT_DETAILED_DATA = true; 


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
File "check_raw_data" serves as sanity check code to see if there is corruption in raw data or if the problem we encounter currently (15.01.2025) is due to communication. This program does not send anything, rather instead of "Serial.write()", we use Serial Monitor and "Serial.println()" command with flag system in function "rescale_adc_wave". 
We have come to a conclusion that the raw data in fact encounters corruption, therefore the problem needs to be solved at this level. When the buffer is filled with corrupt data, the plotting on the serial monitor stops for 5 seconds. Corrupt data is the one with all buffer values around zero. This means the buffer didn't even detect self reflection which always occurs after sending a pulsed 32kHz wave. 

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
